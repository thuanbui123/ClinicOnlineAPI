// <auto-generated />
using System;
using ClinicOnline.Infrastructure.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicOnline.Infrastructure.Migrations
{
    [DbContext(typeof(ClinicManagementContext))]
    partial class ClinicManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicOnline.Core.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasComment("(triệu chứng, yêu cầu...)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Pending, Confirmed, Cancelled, Completed");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Appointments_pkey");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Appointments", t =>
                        {
                            t.HasComment("Quản lý lịch hẹn");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Nội dung chính");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Tiêu đề bài viết");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Articles_pkey");

                    b.HasIndex("DoctorId");

                    b.ToTable("Articles", t =>
                        {
                            t.HasComment("Bài viết tư vấn");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.ArticleComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasComment("Bài viết nào");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Nội dung bình luận");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasComment("Lưu Id của bình luận gốc nếu đây là trả lời (reply)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Ai bình luận");

                    b.HasKey("Id")
                        .HasName("ArticleComments_pkey");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleComments", t =>
                        {
                            t.HasComment("bảng lưu các bình luận về bài viết");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasComment("Mô tả bản thân, kinh nghiệm,…");

                    b.Property<string>("CertificateFile")
                        .HasColumnType("text")
                        .HasComment("URL file chứng chỉ, văn bằng");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Degree")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Học vị: Cử nhân, Thạc sĩ, Tiến sĩ,…");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("integer")
                        .HasComment("Số năm kinh nghiệm hành nghề");

                    b.Property<string>("Hospital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Nơi làm việc chính");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text")
                        .HasComment("URL ảnh đại diện");

                    b.Property<string>("Speciality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Chuyên khoa: Nội, Nhi, Tim mạch,…");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Doctors_pkey");

                    b.HasIndex(new[] { "UserId" }, "Doctors_UserId_key")
                        .IsUnique();

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Bảng lưu thông tin bác sĩ");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasComment("Số tiền cần trả");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasComment("Liên kết lịch khám");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasComment("Ai thanh toán");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("MoMo, ZaloPay, Tiền mặt…");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Pending, Paid, Failed");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Invoices_pkey");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Invoices", t =>
                        {
                            t.HasComment("Hóa đơn");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasComment("Gắn với cuộc hẹn tương ứng");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Chẩn đoán bệnh chính");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("FollowUpDate")
                        .HasColumnType("date")
                        .HasComment("Ngày tái khám (nếu có)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text")
                        .HasComment("Triệu chứng mô tả");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("text")
                        .HasComment("Kế hoạch điều trị hoặc tư vấn");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("MedicalRecords_pkey");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords", t =>
                        {
                            t.HasComment("Hồ sơ khám bệnh");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("Mô tả công dụng");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasComment("Ngày hết hạn sử dụng");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Tên thuốc");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Đơn vị thuốc");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Medicines_pkey");

                    b.ToTable("Medicines", t =>
                        {
                            t.HasComment("Danh mục thuốc");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Nội dung tin nhắn");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Đã đọc hay chưa");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasComment("Người nhận");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasComment("Người gửi");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Thời điểm gửi");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Messages_pkey");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", t =>
                        {
                            t.HasComment("Tin nhắn giữa người dùng");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasComment("Nội dung tin nhắn/email");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Thời điểm gửi");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("Email hoặc Web");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Ai nhận thông báo");

                    b.HasKey("Id")
                        .HasName("Notifications_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Ghi nhận gửi thông báo");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasComment("Địa chỉ cư trú");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasComment("Ngày sinh");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("Giới tính");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Mã bảo hiểm y tế nếu có");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("text")
                        .HasComment("Tiền sử bệnh án");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Patients_pkey");

                    b.HasIndex(new[] { "UserId" }, "Patients_UserId_key")
                        .IsUnique();

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Hồ sơ bệnh nhân");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasComment("Gắn với lịch hẹn khám");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DoctorNote")
                        .HasColumnType("text")
                        .HasComment("Ghi chú đơn thuốc");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Prescriptions_pkey");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions", t =>
                        {
                            t.HasComment("Đơn thuốc");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.PrescriptionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid")
                        .HasComment("Gắn với đơn thuốc");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("Liều lượng kê");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasComment("Hướng dẫn dùng thuốc (uống 2 lần/ngày, sau ăn…)");

                    b.HasKey("Id")
                        .HasName("PrescriptionItems_pkey");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItems", t =>
                        {
                            t.HasComment("Các dòng thuốc trong đơn");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Còn trống không? Nếu false là đã có người đặt");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Khung giờ cụ thể (ví dụ: \"08:00-08:30\")");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date")
                        .HasComment("Ngày làm việc");

                    b.HasKey("Id")
                        .HasName("Schedules_pkey");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules", t =>
                        {
                            t.HasComment("Lịch làm việc bác sĩ");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Đánh dấu đã xóa mềm hay chưa");

                    b.Property<int>("Keys")
                        .HasColumnType("integer")
                        .HasComment("Khóa cấu hình định danh, ví dụ: SMTP_PORT, ENABLE_NOTI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Tên hiển thị cấu hình");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasComment("Loại cấu hình, ví dụ: Email = 1, SMS = 2...");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("Giá trị cấu hình (string)");

                    b.HasKey("Id")
                        .HasName("Settings_pkey");

                    b.ToTable("Settings", t =>
                        {
                            t.HasComment("Bảng lưu các cấu hình hệ thống");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Vị trí kho hoặc chi nhánh lưu thuốc");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("Số lượng tồn kho hiện tại");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Stocks_pkey");

                    b.HasIndex("MedicineId");

                    b.ToTable("Stocks", t =>
                        {
                            t.HasComment("Tồn kho thuốc");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.StockTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("Số lượng thay đổi");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasComment("Lý do (kê đơn, hỏng, hết hạn…)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Import, Export, Use – loại giao dịch");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("StockTransactions_pkey");

                    b.HasIndex("MedicineId");

                    b.ToTable("StockTransactions", t =>
                        {
                            t.HasComment("Lịch sử nhập/xuất thuốc");
                        });
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.HasIndex(new[] { "Email" }, "Users_Email_key")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Appointment", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("Appointments_DoctorId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("Appointments_PatientId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.Schedule", "Schedule")
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("Appointments_ScheduleId_fkey");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Article", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Doctor", "Doctor")
                        .WithMany("Articles")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("Articles_DoctorId_fkey");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.ArticleComment", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Article", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("ArticleComments_ArticleId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.ArticleComment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_parent_comment");

                    b.HasOne("ClinicOnline.Core.Entities.User", "User")
                        .WithMany("ArticleComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("ArticleComments_UserId_fkey");

                    b.Navigation("Article");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Doctor", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("ClinicOnline.Core.Entities.Doctor", "UserId")
                        .IsRequired()
                        .HasConstraintName("Doctors_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Invoice", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Appointment", "Appointment")
                        .WithMany("Invoices")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("Invoices_AppointmentId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("Invoices_PatientId_fkey");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.MedicalRecord", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Appointment", "Appointment")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("MedicalRecords_AppointmentId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("MedicalRecords_DoctorId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("MedicalRecords_PatientId_fkey");

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Message", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("Messages_ReceiverId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("Messages_SenderId_fkey");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Notification", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Notifications_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Patient", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("ClinicOnline.Core.Entities.Patient", "UserId")
                        .IsRequired()
                        .HasConstraintName("Patients_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Prescription", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("Prescriptions_AppointmentId_fkey");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.PrescriptionItem", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Medicine", "Medicine")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("PrescriptionItems_MedicineId_fkey");

                    b.HasOne("ClinicOnline.Core.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("PrescriptionItems_PrescriptionId_fkey");

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Schedule", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("Schedules_DoctorId_fkey");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Stock", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Medicine", "Medicine")
                        .WithMany("Stocks")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("Stocks_MedicineId_fkey");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.StockTransaction", b =>
                {
                    b.HasOne("ClinicOnline.Core.Entities.Medicine", "Medicine")
                        .WithMany("StockTransactions")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("StockTransactions_MedicineId_fkey");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Appointment", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Article", b =>
                {
                    b.Navigation("ArticleComments");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.ArticleComment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Medicine", b =>
                {
                    b.Navigation("PrescriptionItems");

                    b.Navigation("StockTransactions");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Invoices");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Prescription", b =>
                {
                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.Schedule", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicOnline.Core.Entities.User", b =>
                {
                    b.Navigation("ArticleComments");

                    b.Navigation("Doctor");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("Notifications");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
